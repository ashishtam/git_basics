{
  "name": "Git Basics",
  "tagline": "by Ashish Tamrakar",
  "body": "## Git\r\n* distributed version control system (VCS)\r\n* a free and open source \r\n* handle everything from small to very large projects\r\n* speed and efficiency\r\n\r\n## Why git?\r\n\r\nAllows groups of people to work on the same documents (often code) at the same time, and without stepping on each other's toes.\r\n\r\n## Git Servers\r\nThere are lot of git servers which supports git. Among them, popular one is the github.com\r\n\r\nGitHub is a website where copies of Git repositories can be uploaded. \r\n\r\nIt is a Git repository hosting service, which offers all of the distributed revision control and source code management (SCM) functionality of Git as well as adding its own features. Unlike Git, which is strictly a command-line tool, GitHub provides a web-based graphical interface and desktop as well as mobile integration. It also provides access control and several collaboration features such as wikis, task management, bug tracking and other features that can be helpful for projects. It allows collaboration with other people on projects. It does that by providing a centralized location to share the repository, a web-based interface to view it, and features like forking, pull requests distributed revision control, issues, and wikis.\r\n\r\n\r\n## How to get started with git?\r\nYou need to go to the link <http://www.github.com>\r\n\r\nClick on the `Sign Up` button.\r\n\r\nThe page shown below appears. Fill up the necessary information and then proceed.\r\n![Sign Up](images/1_sign_up.PNG)\r\n\r\nOnce you are done with signing up the GitHub account. We can login into through your username and password that you just created. You will see the following page like this.\r\n![Dashboard](images/2_dashboard.PNG)\r\n\r\nYou can click on the `New Repository` button and create the repository to get started your project into the GitHub.\r\n![New repository](images/3_new_repository.PNG)\r\n\r\nAfter you create the new repository, you will get the following page.\r\nI created the repository named `aeop_program`.\r\n![Repository Setup](images/4_repository_setup.PNG)\r\n\r\n\r\n## Installing git into your computer\r\n#### For windows,\r\nGo to the below link and then download and install `git-scm`\r\n\r\n<https://git-for-windows.github.io/>\r\n\r\nYou are on your desired folder to create a git repository. You just need to right click on the white part and then click on “Git Bash Here”.\r\n\r\n![Git bash](images/5_after_installation_in_windows.png)\r\n\r\n#### For linux,\r\nOpen the terminal and install git as,\r\n\r\n    $ sudo apt-get install git\r\n\r\n#### For Mac,\r\nIt comes with pre-install git and can be accessed through your terminal. To open the terminal, you need to Applications->Utilities folder.\r\n\r\nIf it is not installed then, you can download it from the following link as,\r\n\r\n<https://code.google.com/archive/p/git-osx-installer/downloads>\r\n\r\n### Configuring your git\r\n\r\nThis configuration is the one-time configuration. You need to config your name and e-mail so that git can keep track of the person who commits the files.\r\n\r\n    $ git config --global user.email \"you@example.com\"\r\n    $ git config --global user.name \"Your Name\"\r\n\r\n![Git configuration](images/4_1_configuration_git.PNG)\r\n\r\nTo check whether your configuration was set up properly or not.\r\n\r\n    $ git config --all\r\n\r\n![Git config check](images/4_2_check_git_config.PNG)\r\n\r\n## Create a local git folder and then committing your files/folders\r\n### Initializing a git repository\r\nWe create a git repository on our local machine.\r\n\r\n    $ git init\r\n\r\n![Git init](images/6_initializing_git_repository.PNG)\r\n\r\nA new hidden folder `.git` will now be created in your initialized directory. Git stores its database and configuration information in that folder to keep track of your project.\r\n\r\n### Checking the status of the repository\r\n\r\n    $ git status\r\n\r\nIf you file has not been added, then it will be taken as `untracked` files.\r\n\r\n![Git status](images/7_checking_git_status.PNG)\r\n\r\n\r\n### Adding a files/folders in the repository\r\nIn order to add the files and/or folders, you use the following command as,\r\n\r\n    $ git add helloworld.c\r\n\r\nIf you want to add all the files/folders then,\r\n\r\n    $ git add *\r\n\r\nOnce you have added your files, your files are ready to be committed.\r\n\r\n![Git add files/folders](images/8_adding_file.PNG)\r\n\r\n\r\n### Your first commit\r\nTo commit the staged files, you need to provide the message in commit as,\r\n\r\n    $ git commit -m \"My First Commit\"\r\n\r\n![Git commit](images/9_first_commit.png)\r\n\r\nYou just made your first commit. However, your repository is just in your local machine right now. So, in order to add your files in the repository that you created in your GitHub account, you connect your git folder to the remote repository in `www.github.com`\r\n\r\n![Git add repo](images/9_connecting_repo_to_remote_github.PNG)\r\n\r\n\r\n### Push your content to the remote repository\r\nIn order to push your remote repository, you can execute the following command as,\r\n\r\nIt prompts for your GitHub account username and password. Once you entered your username and password, it pushes your committed files into the GitHub account.\r\n\r\n\r\n### Clone your git repository into your system\r\n\r\nYou need to click on the green button `Clone or download` which pops the “Clone with HTTPS” window. You can click on the button beside the link given to copy the HTTPS link.\r\n\r\n![Git clone](images/11_Cloning_your_repository.PNG)\r\n\r\nThen similar to the previous process, right click on the folder you like to clone, click on `Git Bash Here` which opens the terminal window.\r\n\r\n    $ git clone <Paste your https link that you copied>\r\n\r\n![Git clone information](images/11_1_Clone_information.PNG)\r\n\r\n### Keep your repository up to date with the remote repository (Pull)\r\nYou need to pull the files that your team member might have pushed to the repository which you might need to link up with. So in order to do that, you need to pull the files and folders from the repository.\r\n\r\n![Git pull](images/12_Pulling_the_content_from_repo.PNG)\r\n\r\n\r\n## Additional Stuffs...\r\n\r\n### Git log\r\nIt displays all your commits in the order you have done. It’s just like viewing your history of the repository. It also displays other information about HEAD which helps you to revert to that commit if anything wrong has happened to your code.\r\n\r\n    $ git log\r\n\r\n### Git branching/checkout/merge\r\n#### Why branching?\r\n* It’s helps to isolate our features from each other.\r\n* In default, we have only single branch when we create the repository. The name of that branch is `master`\r\n\r\nTo check the list of branch, \r\n\r\n    $ git branch\r\n\r\n\r\nTo create the new branch,\r\n\r\n    $ git branch feature1\r\n\r\nTo switch (checkout) to the newly created branch,\r\n\r\n    $ git checkout feature1\r\n\r\nYou can work on `feature1` branch and even push to the repository. You can switch back to the `master branch` and then merge that `feature` branch to `master` branch.\r\n\r\nDisplays the list of branches and the current branch it is on.\r\n\r\n    $ git branch\r\n\r\nAdds the `myName.txt` file, commits the file and push into `feature1` branch.\r\n\r\n``$ git add myName.txt``\r\n``$ git commit -m “MyName.txt file added.”``\r\n``$ git push origin feature1``\r\n\r\nTo return back to master branch,\r\n\r\n    $ git checkout master\r\n\r\nTo check the branch in which it currently is,\r\n\r\n    $ git branch\r\n\r\nTo merge the recently made feature branch,\r\n\r\n    $ git merge feature1\r\n\r\nTo update the remote repository by pushing into master branch as,\r\n\r\n    $ git push origin master\r\n\r\n### Git diff\r\nIt is used to check the difference between two branches.\r\n\r\n    $ git diff master feature1\r\n\r\n\r\n### Delete the feature branch\r\nTo delete the unnecessary feature branches (but be very careful while deleting as once you delete the branch, you cannot rollback),\r\n\r\n    $ git branch -d feature1\r\n\r\n\r\n\r\n<script>\r\n  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\r\n  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\r\n  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\r\n  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');\r\n\r\n  ga('create', 'UA-74861100-2', 'auto');\r\n  ga('send', 'pageview');\r\n\r\n</script>\r\n\r\n\r\n#### References\r\n* <http://rogerdudler.github.io/git-guide/>\r\n* <https://try.github.io/levels/1/challenges/1>\r\n* <http://blog.udacity.com/2015/06/a-beginners-git-github-tutorial.html>\r\n* <https://git-scm.com/>\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}